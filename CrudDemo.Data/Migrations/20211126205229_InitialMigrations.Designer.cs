// <auto-generated />
using System;
using CrudDemo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CrudDemo.Data.Migrations
{
    [DbContext(typeof(DemoDbContext))]
    [Migration("20211126205229_InitialMigrations")]
    partial class InitialMigrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CrudDemo.Data.Models.Entities.DepartmentEntity", b =>
                {
                    b.Property<string>("DepartmentCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DepartmentCode");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            DepartmentCode = "IT",
                            Name = "Information Technology"
                        },
                        new
                        {
                            DepartmentCode = "SALES",
                            Name = "Sales"
                        },
                        new
                        {
                            DepartmentCode = "AD",
                            Name = "Advertising"
                        },
                        new
                        {
                            DepartmentCode = "SUP",
                            Name = "Tech Support"
                        });
                });

            modelBuilder.Entity("CrudDemo.Data.Models.Entities.EmployeeEntity", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentCode");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("CrudDemo.Data.Models.Entities.EmployeeProjectEntity", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployeeId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("EmployeeProject");
                });

            modelBuilder.Entity("CrudDemo.Data.Models.Entities.ProjectEntity", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UpdatedByEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedTimestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectId");

                    b.HasIndex("CreatedByEmployeeId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("CrudDemo.Data.Models.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("CrudDemo.Data.Models.Entities.DepartmentEntity", "Ref_Department")
                        .WithMany("Ref_ManyEmployees")
                        .HasForeignKey("DepartmentCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ref_Department");
                });

            modelBuilder.Entity("CrudDemo.Data.Models.Entities.EmployeeProjectEntity", b =>
                {
                    b.HasOne("CrudDemo.Data.Models.Entities.EmployeeEntity", "Ref_Employee")
                        .WithMany("Ref_Projects")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrudDemo.Data.Models.Entities.ProjectEntity", "Ref_Project")
                        .WithMany("Ref_Employees")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ref_Employee");

                    b.Navigation("Ref_Project");
                });

            modelBuilder.Entity("CrudDemo.Data.Models.Entities.ProjectEntity", b =>
                {
                    b.HasOne("CrudDemo.Data.Models.Entities.EmployeeEntity", "Ref_CreatedByEmployee")
                        .WithMany("Ref_CreatedProjects")
                        .HasForeignKey("CreatedByEmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Ref_CreatedByEmployee");
                });

            modelBuilder.Entity("CrudDemo.Data.Models.Entities.DepartmentEntity", b =>
                {
                    b.Navigation("Ref_ManyEmployees");
                });

            modelBuilder.Entity("CrudDemo.Data.Models.Entities.EmployeeEntity", b =>
                {
                    b.Navigation("Ref_CreatedProjects");

                    b.Navigation("Ref_Projects");
                });

            modelBuilder.Entity("CrudDemo.Data.Models.Entities.ProjectEntity", b =>
                {
                    b.Navigation("Ref_Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
